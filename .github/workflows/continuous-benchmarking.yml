# MIT License
#
# Copyright (c) 2022 Dilina Dehigama and EASE Lab
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
name: Run scheduled experiments

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  clean_up:
    name: Clean-up workspace
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [gcr, aws]
    env:
      working-directory: ./src
    steps:
      - name: "Cleanup build folder"
        run: |
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true

  build_client:
    name: Build framework
    needs: clean_up
    runs-on: ubuntu-latest
    env:
      working-directory: ./src
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Build client binary
        working-directory: ${{env.working-directory}}
        run: env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o stellar main.go

      - name: Package client artifact
        working-directory: ${{env.working-directory}}
        run: tar -czvf build.tar ./stellar

      - name: Upload client artifact
        uses: actions/upload-artifact@v2
        with:
          name: STeLLAR-build
          path: ${{env.working-directory}}/build.tar
          retention-days: 1

  run_warm_experiments_aws:
    name: Run AWS warm function experiments
    needs: build_client
    runs-on: [self-hosted, aws]
    env:
      working-directory: src
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - name: Configure AWS credentials using EASE lab account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-1

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Set up Node.js 16.16.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: AWS Warm Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/warm-function-invocations/warm-baseline-aws.json -db -w

      - uses: actions/upload-artifact@v3
        with:
          name: aws-warm-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  run_warm_experiments_gcr:
    name: Run GCR warm function experiments
    needs: build_client
    runs-on: [self-hosted, gcr]
    env:
      working-directory: src
      DOCKER_HUB_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
      DOCKER_HUB_ACCESS_TOKEN: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - id: "auth"
        name: Configure GCR credentials
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{secrets.GCR_CREDENTIALS}}"

      - name: "Set up gcloud"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: GCR Warm Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/warm-function-invocations/warm-baseline-gcr.json -db -w

      - uses: actions/upload-artifact@v3
        with:
          name: gcr-warm-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  run_warm_experiments_cloudflare:
    name: Run Cloudflare warm function experiments
    needs: build_client
    runs-on: [self-hosted, cloudflare]
    env:
      working-directory: src
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    steps:      
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: Cloudflare Warm Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/warm-function-invocations/warm-baseline-cloudflare.json -db -w

      - uses: actions/upload-artifact@v3
        with:
          name: cloudflare-warm-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  run_warm_experiments_azure:
    name: Run Azure warm function experiments
    needs: build_client
    runs-on: [ self-hosted, azure ]
    env:
      working-directory: src
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Set up Node 16.16.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: Azure Warm Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: ./stellar -c ../continuous-benchmarking/experiments/warm-function-invocations/warm-baseline-azure.json -db -w

      - uses: actions/upload-artifact@v3
        with:
          name: azure-warm-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  run_cold_experiments_aws:
    name: Run AWS cold function experiments
    needs: run_warm_experiments_aws
    runs-on: [self-hosted, aws]
    env:
      working-directory: src
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - name: Configure AWS credentials using EASE lab account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-1

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Set up Node.js 16.16.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: AWS Cold Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/cold-function-invocations/cold-baseline-aws.json -db

      - uses: actions/upload-artifact@v3
        with:
          name: aws-cold-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  run_cold_experiments_gcr:
    name: Run GCR cold function experiments
    needs: run_warm_experiments_gcr
    runs-on: [self-hosted, gcr]
    env:
      working-directory: src
      DOCKER_HUB_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
      DOCKER_HUB_ACCESS_TOKEN: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - id: "auth"
        name: Configure GCR credentials
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{secrets.GCR_CREDENTIALS}}"

      - name: "Set up gcloud"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: GCR Cold Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/cold-function-invocations/cold-baseline-gcr.json -db

      - uses: actions/upload-artifact@v3
        with:
          name: gcr-cold-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  run_cold_experiments_cloudflare:
    name: Run Cloudflare cold function experiments
    needs: run_warm_experiments_cloudflare
    runs-on: [self-hosted, cloudflare]
    env:
      working-directory: src
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    steps:      
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: Cloudflare Cold Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: ./stellar -a 356764711652 -o latency-samples -c ../continuous-benchmarking/experiments/cold-function-invocations/cold-baseline-cloudflare.json -db

      - uses: actions/upload-artifact@v3
        with:
          name: cloudflare-cold-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  run_cold_experiments_azure:
    name: Run Azure cold function experiments
    needs: run_warm_experiments_azure
    runs-on: [ self-hosted, azure ]
    timeout-minutes: 540
    env:
      working-directory: src
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: continuous-benchmarking

      - name: Set up Go 1.21
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Set up Node 16.16.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.16.0

      - name: Download client artifact
        uses: actions/download-artifact@v2
        with:
          name: STeLLAR-build

      - name: Untar client build
        working-directory: ${{env.working-directory}}
        run: tar --strip-components=1 -xvf ../build.tar -C .

      - name: Azure Cold Function Invocation - Baseline
        working-directory: ${{env.working-directory}}
        run: ./stellar -c ../continuous-benchmarking/experiments/cold-function-invocations/cold-baseline-azure.json -db -l debug

      - uses: actions/upload-artifact@v3
        with:
          name: azure-cold-latency-samples
          path: ${{env.working-directory}}/latency-samples

      - name: Send Slack message using Incoming Webhooks
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Scheduled experiment (Job status)"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Name*: ${{ github.workflow }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Name*: ${{ github.job }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job Status*: ${{ job.status }} ❌"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "<!channel>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
