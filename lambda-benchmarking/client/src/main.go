package main

import (
	"flag"
	"fmt"
	"lambda-benchmarking/client/benchmarking"
	"lambda-benchmarking/client/visualization"
	"log"
	"os"
	"path/filepath"
	"time"
)

//Note: those variables are pointers
var requestsFlag = flag.Int("requests", 1, "Number of outstanding requests for this run.")
var payloadLengthFlag = flag.Int("payloadLengthBytes", 8, "Length of the payload generated by the lambda function.")
var outputPathFlag = flag.String("outputPath", "latency-samples", "The path where latency samples should be written.")
var frequencySecondsFlag = flag.Int("frequencySeconds", -1, "Frequency at which the latency profiler operates.")
var burstsNumberFlag = flag.Int("bursts", 5, "Number of bursts which the latency profiler will trigger.")
var lambdaIncrementLimitFlag = flag.Int("lambdaIncrementLimit", 5e7, "Increment limit for the lambda function to busy spin on.")

func main() {
	log.Printf("Started benchmarking HTTP client on %v.", time.Now().Format(time.RFC850))

	flag.Parse()
	log.Printf("Parameters entered: %d requests in a burst, %dbytes payload length, %d busy spin counter, %d profiler run frequency, output path was set to `%s`.",
		*requestsFlag, *payloadLengthFlag, *lambdaIncrementLimitFlag, *frequencySecondsFlag, *outputPathFlag)

	outputDirectoryPath := filepath.Join(*outputPathFlag, time.Now().Format(time.RFC850))
	log.Printf("Creating working directory at %s", outputDirectoryPath)
	if err := os.Mkdir(outputDirectoryPath, os.ModePerm); err != nil {
		log.Fatal(err)
	}

	csvFile, err := os.Create(filepath.Join(outputDirectoryPath, fmt.Sprintf(
		"%dbursts_%dreqs_freq%ds_payload%db_counter%d.csv",
		*burstsNumberFlag,
		*requestsFlag,
		*frequencySecondsFlag,
		*payloadLengthFlag,
		*lambdaIncrementLimitFlag)))
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := csvFile.Close(); err != nil {
			log.Fatal(err)
		}
	}()

	burstDeltas := benchmarking.CreateBurstDeltas(*frequencySecondsFlag, *burstsNumberFlag)
	relativeBurstDeltas := benchmarking.MakeBurstDeltasRelative(burstDeltas)

	log.Println("Running profiler...")
	benchmarking.SafeWriterInstance.Initialize(csvFile)
	benchmarking.TriggerRelativeAsyncBurstGroups(relativeBurstDeltas, *requestsFlag, *lambdaIncrementLimitFlag, *payloadLengthFlag)

	log.Println("Flushing results to CSV file...")
	benchmarking.SafeWriterInstance.Writer.Flush()

	log.Println("Plotting bursts from CSV file...")
	visualization.ExtractBurstsAndGeneratePlots(*burstsNumberFlag, burstDeltas, relativeBurstDeltas, csvFile, outputDirectoryPath)

	log.Println("Exiting...")
}
