package main

import (
	"flag"
	"fmt"
	"lambda-benchmarking/client/benchmarking"
	"log"
	"os"
	"time"
)

//Note: those variables are pointers
var requestsFlag = flag.Int("requests", 1, "Number of outstanding requests for this run.")

// TODO: replace those 2 flags
var execMsFlag = flag.Int("execMs", 80, "Time duration for the lambda function to busy spin.")

//var lambdaIncrementLimitFlag = flag.Int("lambdaIncrementLimit", 2e8, "Increment limit for the lambda function to busy spin on.")
var payloadLengthFlag = flag.Int("payloadLengthBytes", 8, "Length of the payload generated by the lambda function.")
var outputPathFlag = flag.String("outputPath", "latency-samples", "The path where latency samples should be written.")

// Latency Profiler
var isProfilerFlag = flag.Bool("isProfiler", true, "Is this a latency profiler run? (otherwise it's a cold start delta identifier run)")
var frequencySecondsFlag = flag.Int("frequencySeconds", 120, "Frequency at which the latency profiler operates.")

func main() {
	log.Printf("Started benchmarking HTTP client on %v.", time.Now().Format(time.RFC850))
	flag.Parse()
	log.Printf("Parameters entered: %d requests in a burst, %dbytes payload length, %dms busy spin, is profiler run (%v with frequency %d), output path was set to `%s`.",
		*requestsFlag, *payloadLengthFlag, *execMsFlag, *isProfilerFlag, *frequencySecondsFlag, *outputPathFlag)

	file, err := os.Create(fmt.Sprintf("%s/%dreqs_constantDeltas%v_payload%dbytes_exec%dms_%s.csv",
		*outputPathFlag,
		*requestsFlag,
		*isProfilerFlag,
		*payloadLengthFlag,
		*execMsFlag,
		time.Now().Format(time.Stamp)),
	)
	if err != nil {
		log.Fatal(err)
	}
	benchmarking.SafeWriterInstance.Initialize(file)

	var burstDeltas []time.Duration
	if *isProfilerFlag {
		// latency profiler run, delta is constant
		burstDeltas = make([]time.Duration, 5)
		for i := range burstDeltas {
			burstDeltas[i] = time.Duration(*frequencySecondsFlag) * time.Second
		}
	} else {
		// cold start delta identifier run, delta varies so that the exact timeout can be identified
		burstDeltas = []time.Duration{
			time.Duration(0),
			500 * time.Millisecond,
			time.Second,
			5 * time.Second,
			15 * time.Second,
			30 * time.Second,
			time.Minute,
			5 * time.Minute,
			8 * time.Minute,
			10 * time.Minute,
			12 * time.Minute,
			20 * time.Minute,
		}
	}

	benchmarking.RunProfiler(burstDeltas, *requestsFlag, *execMsFlag, *payloadLengthFlag)

	log.Println("All bursts completed, now flushing to disk and exiting program.")
	benchmarking.SafeWriterInstance.Writer.Flush()
	if err := file.Close(); err != nil {
		log.Fatalln(err)
	}
}
